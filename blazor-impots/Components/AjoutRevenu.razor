@using BlazorImpots.Model

<!-- Ajout de revenus -->
<div class="modal fade" id="incomeModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Ajouter des revenus</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="selectTypeRevenu">Type de revenus</label>
                    <select id="selectTypeRevenu" class="form-control form-control-sm" bind="TypeNouveauRevenu">
                        <option value="salaire">Salaire</option>
                        <option value="foncier">Foncier</option>
                        @*<option value="dividende">Dividendes</option>*@
                    </select>
                </div>
                <div class="form-group">
                    <label for="libelleRevenu">Libellé</label>
                    <input id="libelleRevenu" type="text" class="form-control form-control-sm"
                           bind="Libelle" />
                </div>
                <div class="form-group">
                    <label for="montantRevenu">Montant</label>
                    <input id="montantRevenu" type="number" class="form-control form-control-sm"
                           bind="Montant" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">
                    Annuler
                </button>
                <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="@AjoutRevenus">
                    Ajouter
                </button>
            </div>
        </div>
    </div>
</div>
@using BlazorImpots
@using Microsoft.AspNetCore.Components

@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@functions{
    private string TypeNouveauRevenu { get; set; }

    private string Libelle { get; set; }

    private int Montant { get; set; }

    public async Task Open()
    {
        this.TypeNouveauRevenu = "salaire";
        this.Libelle = "";
        this.Montant = 0;

        await JSRuntime.InvokeAsync<bool>("openModal");
    }

    [Parameter]
    private EventCallback<NouveauRevenuEventArgs> OnNouveauRevenu { get; set; }

    private async void AjoutRevenus()
    {
        Revenu revenu = TypeNouveauRevenu switch
        {
            "salaire" => (Revenu)new Salaire(Montant),
            "foncier" => (Revenu)new Foncier(Montant),
            //"dividende" => 0,
            _ => throw new ArgumentException(),
        };
        revenu.Libelle = this.Libelle;

        await OnNouveauRevenu.InvokeAsync(new NouveauRevenuEventArgs(revenu));

    }
}
